{
    "agent_id": "<function agent_id at 0x7fbd5a987100>",
    "agent_name": "Accounting Assistant",
    "agent_description": "Generate a profit report for a company!",
    "system_prompt": "You are the accounting agent. Your purpose is to generate a profit report for a company based on given revenue and expenses.",
    "short_memory": "System: : You are the accounting agent. Your purpose is to generate a profit report for a company based on given revenue and expenses.\n\n\nSystem: \n\n\n    You've been granted tools to assist users by always providing outputs in JSON format for tool usage. \n    Whenever a tool usage is required, you must output the JSON wrapped inside markdown for clarity. \n    Provide a commentary on the tool usage and the user's request and ensure that the JSON output adheres to the tool's schema.\n    \n    Here are some rules:\n    Do not ever use tools that do not have JSON schemas attached to them.\n    Do not use tools that you have not been granted access to.\n    Do not use tools that are not relevant to the task at hand.\n    Do not use tools that are not relevant to the user's request.\n    \n    \n    Here are the guidelines you must follow:\n\n    1. **Output Format**:\n    - All outputs related to tool usage should be formatted as JSON.\n    - The JSON should be encapsulated within triple backticks and tagged as a code block with 'json'.\n\n    2. **Schema Compliance**:\n    - Ensure that the JSON output strictly follows the provided schema for each tool.\n    - Each tool's schema will define the structure and required fields for the JSON output.\n\n    3. **Schema Example**:\n    If a tool named `example_tool` with a schema requires `param1` and `param2`, your response should look like:\n    ```json\n    {\n        \"type\": \"function\",\n        \"function\": {\n        \"name\": \"example_tool\",\n        \"parameters\": {\n            \"param1\": 123,\n            \"param2\": \"example_value\"\n        }\n        }\n    }\n    ```\n\n    4. **Error Handling**:\n    - If there is an error or the information provided by the user is insufficient to generate a valid JSON, respond with an appropriate error message in JSON format, also encapsulated in markdown.\n\n    Remember, clarity and adherence to the schema are paramount. Your primary goal is to ensure the user receives well-structured JSON outputs that align with the tool's requirements.\n\n    ---\n\n    Here is the format you should always follow for your responses involving tool usage:\n\n    ```json\n    {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"<tool_name>\",\n        \"parameters\": {\n            \"param1\": \"<value1>\",\n            \"param2\": \"<value2>\"\n        }\n    }\n    }\n    ```\n\n    Please proceed with your task accordingly.\n\n    \n\n\nSystem: {\n    \"type\": \"function\",\n    \"function\": {\n        \"description\": \"\\n    Calculate the profit from the revenue and expenses.\\n    Args:\\n        revenue (float): The revenue from the sales.\\n        expenses (float): The expenses from the sales.\\n    Returns:\\n        float: The profit from the revenue and expenses.\\n    \",\n        \"name\": \"calculate_profit\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"revenue\": {\n                    \"type\": \"number\",\n                    \"description\": \"revenue\"\n                },\n                \"expenses\": {\n                    \"type\": \"number\",\n                    \"description\": \"expenses\"\n                }\n            },\n            \"required\": [\n                \"revenue\",\n                \"expenses\"\n            ]\n        }\n    }\n}\n\n\nSystem: {\n    \"type\": \"function\",\n    \"function\": {\n        \"description\": \"\\n    Generates a report for a company's profit.\\n    Args:\\n        company_name (str): The name of the company.\\n        profit (float): The calculated profit.\\n    Returns:\\n        str: The report for the company's profit.\\n    \",\n        \"name\": \"generate_report\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"company_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"company_name\"\n                },\n                \"profit\": {\n                    \"type\": \"number\",\n                    \"description\": \"profit\"\n                }\n            },\n            \"required\": [\n                \"company_name\",\n                \"profit\"\n            ]\n        }\n    }\n}\n\n\nHuman:: We're the Swarm Corporation, our total revenue is $100,000 and our total expenses are $50,000.\n\n\nAccounting Assistant: None\n\n\nAccounting Assistant: None\n\n\nAccounting Assistant: None\n\n",
    "loop_interval": 0,
    "retry_attempts": 3,
    "retry_interval": 1,
    "interactive": false,
    "dashboard": false,
    "dynamic_temperature": true,
    "autosave": true,
    "saved_state_path": "Accounting Assistant_state.json",
    "max_loops": 1,
    "Task": "We're the Swarm Corporation, our total revenue is $100,000 and our total expenses are $50,000.",
    "Stopping Token": "<DONE>",
    "Dynamic Loops": false,
    "sop": null,
    "sop_list": null,
    "context_length": 8192,
    "user_name": "Human:",
    "self_healing_enabled": false,
    "code_interpreter": false,
    "multi_modal": null,
    "pdf_path": null,
    "list_of_pdf": null,
    "preset_stopping_token": false,
    "traceback": null,
    "traceback_handlers": null,
    "streaming_on": true,
    "docs": null,
    "docs_folder": null,
    "verbose": true,
    "parser": null,
    "best_of_n": null,
    "callback": null,
    "metadata": null,
    "callbacks": null,
    "search_algorithm": null,
    "logs_to_filename": null,
    "evaluator": null,
    "output_json": false,
    "stopping_func": null,
    "custom_loop_condition": null,
    "sentiment_threshold": null,
    "custom_exit_command": "exit",
    "sentiment_analyzer": null,
    "limit_tokens_from_string": null,
    "tool_schema": null,
    "output_type": null,
    "function_calling_type": "json",
    "output_cleaner": null,
    "function_calling_format_type": "OpenAI",
    "list_base_models": null,
    "metadata_output_type": "json"
}